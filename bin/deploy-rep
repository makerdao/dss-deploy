#!/usr/bin/env bash
set -ex

export ETH_GAS=${ETH_GAS:-"7000000"}
export ETH_FROM=${ETH_FROM:-$(seth rpc eth_coinbase)}
unset SOLC_FLAGS

test -z "$SKIP_BUILD" && dapp --use solc:0.5.0 build

# Deploy REP ilk (adapter, mover, spotter, flip and init variables)
test -z "$MCD_DEPLOY" && exit 1
test -z "$REP" && REP=$(dapp create DSToken "$(seth --to-bytes32 "$(seth --from-ascii "REP")")")
test -z "$PIP_REP" && PIP_REP=$(dapp create DSValue)
MCD_VAT=0x$(seth call "$MCD_DEPLOY" "vat()(address)")
MCD_JOIN_REP=$(dapp create GemJoin "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "REP")")" "$REP")
MCD_MOVE_REP=$(dapp create GemMove "$MCD_VAT" "$(seth --to-bytes32 "$(seth --from-ascii "REP")")")
seth send "$MCD_DEPLOY" "deployCollateral(bytes32,address,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "REP")")" "$MCD_JOIN_REP" "$MCD_MOVE_REP" "$PIP_REP"
while IFS=$'\n' read -r line; do ilk+=("$line"); done < <(seth call "$MCD_DEPLOY" "ilks(bytes32)(address,address,address)" "$(seth --to-bytes32 "$(seth --from-ascii "REP")")")
MCD_FLIP_REP=0x${ilk[0]}

cat > load-ilk-rep-"$(seth chain)" << EOF
#!/bin/bash

# ilk deployment on $(seth chain) from $(git rev-parse HEAD)
# $(date)
export PIP_REP=$PIP_REP
export REP=$REP
export MCD_JOIN_REP=$MCD_JOIN_REP
export MCD_MOVE_REP=$MCD_MOVE_REP
export MCD_FLIP_REP=$MCD_FLIP_REP
EOF
